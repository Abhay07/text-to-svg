/**
 * Copyright (c) 2015 Hideki Shiro
 */

'use strict';

var assert = require('assert');

var TextToSVG = require('../src/index.js').TextToSVG;
var textToSVG = new TextToSVG('fonts/ipag.ttf');

const D_HELLO_0_0_72_KERNING = 'M 5.2734375 -54.0703125 L 10.6171875 -54.0703125 L 10.6171875 -33.99609375 Q 15.85546875 -39.234375 21.0234375 -39.234375 Q 26.89453125 -39.234375 29.6015625 -34.06640625 Q 31.11328125 -31.1484375 31.11328125 -27 L 31.11328125 -3.65625 L 25.76953125 -3.65625 L 25.76953125 -25.41796875 Q 25.76953125 -34.13671875 20.1796875 -34.13671875 Q 16.41796875 -34.13671875 13.5703125 -31.39453125 Q 10.6171875 -28.44140625 10.6171875 -24.64453125 L 10.6171875 -3.65625 L 5.2734375 -3.65625 L 5.2734375 -54.0703125 Z M 67.67578125 -14.2734375 Q 64.546875 -2.25 54.0703125 -2.25 Q 47.56640625 -2.25 43.76953125 -7.6640625 Q 40.32421875 -12.62109375 40.32421875 -20.7421875 Q 40.32421875 -28.51171875 43.55859375 -33.46875 Q 47.35546875 -39.234375 54 -39.234375 Q 66.97265625 -39.234375 67.81640625 -19.65234375 L 45.73828125 -19.65234375 Q 46.16015625 -7.06640625 54.140625 -7.06640625 Q 60.46875 -7.06640625 62.05078125 -14.2734375 L 67.67578125 -14.2734375 M 62.05078125 -24.2578125 Q 60.890625 -34.41796875 54 -34.41796875 Q 47.35546875 -34.41796875 45.94921875 -24.2578125 L 62.05078125 -24.2578125 Z M 92.8125 -11.53125 Q 92.8125 -8.4375 95.765625 -8.4375 Q 98.19140625 -8.4375 101.07421875 -9 L 101.07421875 -3.62109375 Q 96.8203125 -3.0234375 94.81640625 -3.0234375 Q 87.1875 -3.0234375 87.1875 -10.51171875 L 87.1875 -54.0703125 L 92.8125 -54.0703125 L 92.8125 -11.53125 Z M 128.8125 -11.53125 Q 128.8125 -8.4375 131.765625 -8.4375 Q 134.19140625 -8.4375 137.07421875 -9 L 137.07421875 -3.62109375 Q 132.8203125 -3.0234375 130.81640625 -3.0234375 Q 123.1875 -3.0234375 123.1875 -10.51171875 L 123.1875 -54.0703125 L 128.8125 -54.0703125 L 128.8125 -11.53125 Z M 162.0703125 -39.234375 Q 168.6796875 -39.234375 172.44140625 -33.3984375 Q 175.67578125 -28.546875 175.67578125 -20.7421875 Q 175.67578125 -14.87109375 173.7421875 -10.44140625 Q 170.15625 -2.21484375 161.9296875 -2.21484375 Q 155.56640625 -2.21484375 151.76953125 -7.62890625 Q 148.32421875 -12.5859375 148.32421875 -20.7421875 Q 148.32421875 -29.53125 152.296875 -34.55859375 Q 156.09375 -39.234375 162.0703125 -39.234375 M 161.9296875 -34.20703125 Q 158.0625 -34.20703125 155.8828125 -30.1640625 Q 153.94921875 -26.61328125 153.94921875 -20.7421875 Q 153.94921875 -15.328125 155.53125 -11.91796875 Q 157.7109375 -7.2421875 162 -7.2421875 Q 165.9375 -7.2421875 168.1171875 -11.28515625 Q 170.05078125 -14.8359375 170.05078125 -20.671875 Q 170.05078125 -26.75390625 168.046875 -30.234375 Q 165.90234375 -34.20703125 161.9296875 -34.20703125 Z';
const D_HELLO_10_20_30 = 'M 12.197265625 -2.529296875 L 14.423828125 -2.529296875 L 14.423828125 5.8349609375 Q 16.6064453125 3.65234375 18.759765625 3.65234375 Q 21.2060546875 3.65234375 22.333984375 5.8056640625 Q 22.9638671875 7.021484375 22.9638671875 8.75 L 22.9638671875 18.4765625 L 20.7373046875 18.4765625 L 20.7373046875 9.4091796875 Q 20.7373046875 5.7763671875 18.408203125 5.7763671875 Q 16.8408203125 5.7763671875 15.654296875 6.9189453125 Q 14.423828125 8.1494140625 14.423828125 9.7314453125 L 14.423828125 18.4765625 L 12.197265625 18.4765625 L 12.197265625 -2.529296875 Z M 38.1982421875 14.052734375 Q 36.89453125 19.0625 32.529296875 19.0625 Q 29.8193359375 19.0625 28.2373046875 16.806640625 Q 26.8017578125 14.7412109375 26.8017578125 11.357421875 Q 26.8017578125 8.1201171875 28.1494140625 6.0546875 Q 29.7314453125 3.65234375 32.5 3.65234375 Q 37.9052734375 3.65234375 38.2568359375 11.8115234375 L 29.0576171875 11.8115234375 Q 29.2333984375 17.0556640625 32.55859375 17.0556640625 Q 35.1953125 17.0556640625 35.8544921875 14.052734375 L 38.1982421875 14.052734375 M 35.8544921875 9.892578125 Q 35.37109375 5.6591796875 32.5 5.6591796875 Q 29.7314453125 5.6591796875 29.1455078125 9.892578125 L 35.8544921875 9.892578125 Z M 48.671875 15.1953125 Q 48.671875 16.484375 49.90234375 16.484375 Q 50.9130859375 16.484375 52.1142578125 16.25 L 52.1142578125 18.4912109375 Q 50.341796875 18.740234375 49.5068359375 18.740234375 Q 46.328125 18.740234375 46.328125 15.6201171875 L 46.328125 -2.529296875 L 48.671875 -2.529296875 L 48.671875 15.1953125 Z M 63.671875 15.1953125 Q 63.671875 16.484375 64.90234375 16.484375 Q 65.9130859375 16.484375 67.1142578125 16.25 L 67.1142578125 18.4912109375 Q 65.341796875 18.740234375 64.5068359375 18.740234375 Q 61.328125 18.740234375 61.328125 15.6201171875 L 61.328125 -2.529296875 L 63.671875 -2.529296875 L 63.671875 15.1953125 Z M 77.529296875 3.65234375 Q 80.283203125 3.65234375 81.8505859375 6.083984375 Q 83.1982421875 8.10546875 83.1982421875 11.357421875 Q 83.1982421875 13.8037109375 82.392578125 15.6494140625 Q 80.8984375 19.0771484375 77.470703125 19.0771484375 Q 74.8193359375 19.0771484375 73.2373046875 16.8212890625 Q 71.8017578125 14.755859375 71.8017578125 11.357421875 Q 71.8017578125 7.6953125 73.45703125 5.6005859375 Q 75.0390625 3.65234375 77.529296875 3.65234375 M 77.470703125 5.7470703125 Q 75.859375 5.7470703125 74.951171875 7.431640625 Q 74.1455078125 8.9111328125 74.1455078125 11.357421875 Q 74.1455078125 13.61328125 74.8046875 15.0341796875 Q 75.712890625 16.982421875 77.5 16.982421875 Q 79.140625 16.982421875 80.048828125 15.2978515625 Q 80.8544921875 13.818359375 80.8544921875 11.38671875 Q 80.8544921875 8.8525390625 80.01953125 7.40234375 Q 79.1259765625 5.7470703125 77.470703125 5.7470703125 Z';

describe('TextToSVG', () => {
  describe('getD', () => {
    it('without option args', () => {
      let expected = D_HELLO_0_0_72_KERNING;
      let actual = textToSVG.getD('hello');
      assert.strictEqual(actual, expected);
    });

    it('with redundant default args', () => {
      let expected = D_HELLO_0_0_72_KERNING;
      let actual = textToSVG.getD('hello', {x: 0, y: 0, fontSize: 72, kerning: true});
      assert.strictEqual(actual, expected);
    });

    it('with args', () => {
      let expected = D_HELLO_10_20_30;
      let actual = textToSVG.getD('hello', {x: 10, y: 20, fontSize: 30, kerning: false});
      assert.strictEqual(actual, expected);
    });

    it('with default font', () => {
      let textToSVG = new TextToSVG();
      let expected = D_HELLO_0_0_72_KERNING;
      let actual = textToSVG.getD('hello');
      assert.strictEqual(actual, expected);
    });
  });

  describe('getPath', () => {
    it('without option args', ()=> {
      let expected = `<path d="${D_HELLO_0_0_72_KERNING}"/>`;
      let actual = textToSVG.getPath('hello');
      assert.strictEqual(actual, expected);
    });

    it('with redundant default args', () => {
      let expected = `<path d="${D_HELLO_0_0_72_KERNING}"/>`;
      let actual = textToSVG.getPath('hello', {x: 0, y: 0, fontSize: 72, kerning: true});
      assert.strictEqual(actual, expected);
    });

    it('with args', () => {
      let expected = `<path d="${D_HELLO_10_20_30}"/>`;
      let actual = textToSVG.getPath('hello', {x: 10, y: 20, fontSize: 30, kerning: false});
      assert.strictEqual(actual, expected);
    });

    it('with attribtues', () => {
      let attributes = {fill: 'red', stroke: 'black'};
      let expected = `<path fill="red" stroke="black" d="${D_HELLO_0_0_72_KERNING}"/>`;
      let actual = textToSVG.getPath('hello', {attributes});
      assert.strictEqual(actual, expected);
    });
  });

  describe('getSVG', () => {
    it('without option args', ()=> {
      let expected = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="${D_HELLO_0_0_72_KERNING}"/></svg>`;
      let actual = textToSVG.getSVG('hello');
      assert.strictEqual(actual, expected);
    });

    it('with redundant default args', () => {
      let expected = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="${D_HELLO_0_0_72_KERNING}"/></svg>`;
      let actual = textToSVG.getSVG('hello', {x: 0, y: 0, fontSize: 72, kerning: true});
      assert.strictEqual(actual, expected);
    });

    it('with args', () => {
      let expected = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="${D_HELLO_10_20_30}"/></svg>`;
      let actual = textToSVG.getSVG('hello', {x: 10, y: 20, fontSize: 30, kerning: false});
      assert.strictEqual(actual, expected);
    });

    it('with attribtues', () => {
      let attributes = {fill: 'red', stroke: 'black'};
      let expected = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path fill="red" stroke="black" d="${D_HELLO_0_0_72_KERNING}"/></svg>`;
      let actual = textToSVG.getSVG('hello', {attributes});
      assert.strictEqual(actual, expected);
    });
  });
});
